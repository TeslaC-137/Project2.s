.data
	theString: .space 2500

	#Error Messages
	INVALID_CHAR: .asciiz "Invalid base-27 number."
	EMPTY: .asciiz "Input is empty."
	TOO_LONG: .asciiz "Input is too long."

.text
	main:
		#Taking user input as string
		li $v0, 8
		la $a0, theString
		li $a1, 2500
		syscall

		li $s0, 0				#Initializing registers to store value of decimal
		li $s7, 0				# Flag to help check space in the middle of string($s0 is 1 after first non space character is encountered, otherwise 0)
		li $t4, 1				# Initializing power to be multiplied

	#Checking if the length of string is less than or equal to 4
	li $t1, 0   # Counter, at the end $t1 will have number of characters(non space) in the string
	length:
		lb $t2, 0($t0)
		beq $t2, 10, checkEmpty     # If \n is encountered move to converting part
		addi $t0, $t0, 1
		beq $t2, 32, length    # If current character is space move to beginning of the loop without incrementing the counter
		addi $t1, $t1, 1
		beq $t1, 5, tooLong
		j length

	convert:
		beq $t1, 0, printDecimal
		addi $t0, $t0, -1     # Move one character backward in the string
		lb $t2, 0($t0)
		beq $t2, 32, checkSpace   # If character is space go to checkSpace to check whether the space is at middle of string or not
		li $s7, 1			# Whenever nonspace character is encountered set $s7 to 1
		addi $t1, $t1, -1
		j convertChar

	exit:
		#Exiting the program
		li $v0, 10
		syscall
	
	# Ignore the spaces at the end of theString, if space found in the middle print error message
	checkSpace:
		addi $t0, $t0, -1         # Go to one character back in the string
		lb $t2, 0($t0)
		beq $t2, 32, checkSpace   # If character ahead is also space, go to checkSpace
		beq $s7, 1, invalidChar          # If character is not space, check whether a non space character is encountered already, if yes($s7=1) print 										invalid message
		#li $s7, 1					# If non space character encountered is the first non space character, set $s7 to 1
		add $t0, $t0, 1				# Before going back to convert increment character in the string, because character is decremented at the beginning of 								convert
		j convert 					# jump to convert

	checkEmpty:
		beq $t1, 0, empty
		j convert

	# Convert valid characters to decimal and increments the result, return error if invalid character is found
	convertChar:
		blt $t2, 48, invalidChar
		blt $t2, 58, convertNum

	convertNum:
		add $t5, $t2, -48
		mult $t5, $t4
	
	printDecimal:
		li $v0, 1
		add $a0, $s0, $zero
		syscall
		j main

	empty:
 		li $v0, 4
 		la $a0 EMPTY
 		syscall
 		j main

	 tooLong:
	 	li $v0, 4
	 	la $a0, TOO_LONG
	 	syscall
	 	j main

	 invalidChar:
	 	li $v0, 4
	 	la $a0, INVALID_CHAR
	 	syscall
	 	j main
